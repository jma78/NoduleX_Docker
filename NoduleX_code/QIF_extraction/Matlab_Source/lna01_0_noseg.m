function [] = lna01_0_noseg(filename_bin, filename_gray, segmentation_num, kernel, gray_threshold, delta_thresh, fast_only)

tic ;
disp('Entering lna01_0_noseg') ;
LNA_VERSION = 1.0 ;

% Should I also input a path to the data and a path to the results as well
% as the filenames themselves??????????????

% bq_full.m (Calculates the 3-D distance to surface metric that takes so
% long.)
%
% Calculate metrics for some lung nodules in support of an ICTS grant
% proposal due on Monday, November 16, 2009.
%
% Metrics have been proposed for 3-D image volumes and for 2-D image
% slices.

% Read in the binary-threshholded 3-D image with the nodule only, which is
% unsigned 8-bit.

% Also read in the grayscale 3-D image which contains the nodule. It is
% signed 16-bit.
%
% Software has been "re-purposed" to analyze bones rather than lung
% nodules. DGP 2010-04-29

disp(' ') ;
disp(' ') ;
disp(' ') ;

% filename_root = strrep(filename_bin, '_bin', '') ;
filename_root = filename_gray ;
diary_name = [filename_root '.diary'] ;
diary(diary_name) ;

% header_name = [filename_bin '.hdr'] ;
header_name = [filename_gray '.hdr'] ;
header = analyze75info(header_name) ;
dy = double(header.PixelDimensions(1)) ;
dx = double(header.PixelDimensions(2)) ;
dz = double(header.PixelDimensions(3)) ;
% image_bin_name = [filename_bin '.img'] ;
% a = int8(analyze75read(image_bin_name)) ;
% temp = size(a) ;
% width = temp(2) ;
% height = temp(1) ;
% depth = temp(3) ;
% s_3d_orig = double(a) ;
% disp_string = ['# rows = '    num2str(height) ...
%             '   # columns = ' num2str(width) ...
%             '   # planes = '  num2str(depth)] ;
% disp(disp_string) ;
% clear a temp disp_string ;

image_gray_name = [filename_gray '.img'] ;
g = analyze75read(image_gray_name) ;
g_3d = double(g) ;
clear g ;

a = int8(ones(size(g_3d))) ;
temp = size(a) ;
width = temp(2) ;
height = temp(1) ;
depth = temp(3) ;
s_3d_orig = double(a) ;
disp_string = ['# rows = '    num2str(height) ...
            '   # columns = ' num2str(width) ...
            '   # planes = '  num2str(depth)] ;
disp(disp_string) ;
clear a temp disp_string ;

if (length(find(mod(s_3d_orig, 1) ~= 0)) > 0)
   disp('WARNING: Segmentation image is not binary!') ;
   exit ;
end
s_3d = s_3d_orig / max(max(max(s_3d_orig))) ;
if (length(find(mod(s_3d, 1) ~= 0)) > 0)
   disp('WARNING: Segmentation image is not binary!') ;
   exit ;
end
clear s_3d_orig ;

% Ensure that the nodule isn't on a border plane. Some of the
% algorithms below require 2 "guard" planes on all sides.

s_3d(1:2,       :,         :        ) = 0 ;
s_3d(end-1:end, :,         :        ) = 0 ;
s_3d(:,         1:2,       :        ) = 0 ;
s_3d(:,         end-1:end, :        ) = 0 ;
s_3d(:,         :,         1:2      ) = 0 ;
s_3d(:,         :,         end-1:end) = 0 ;

%**************************************************************************
%**************************************************************************
%**************************************************************************
% CALCULATE 3-D METRICS
%**************************************************************************
%**************************************************************************
%**************************************************************************

disp('CALCULATING 3-D METRICS ...') ;

%**************************************************************************
% Calculate size metrics.
%**************************************************************************

disp('   Calculating size metrics ...') ;

% Calculate the volume.

disp('      Calculating volume ...') ;
number_voxels_inside_3d = sum(sum(sum(s_3d))) ;
volume_3d = number_voxels_inside_3d * dx * dy * dz ;
disp('      Finished calculating volume.') ;

% Calculate a bounding box.

disp('      Calculating bounding box ...') ;
[iii_list, jjj_list, kkk_list] = ind2sub(size(s_3d), find(s_3d > 0)) ;
x_span_3d = (max(jjj_list) - min(jjj_list)) * dx ;
y_span_3d = (max(iii_list) - min(iii_list)) * dy ;
z_span_3d = (max(kkk_list) - min(kkk_list)) * dz ;
clear iii_list jjj_list kkk_list ;
disp('      Finished calculating bounding box.') ;

% Calculate the surface area.

disp('      Calculating surface area ...') ;
type_a_surfaces_3d = sum(sum(sum(abs(s_3d(:,:,1:(end-1)) - s_3d(:,:,2:end))))) ;
type_b_surfaces_3d = sum(sum(sum(abs(s_3d(:,1:(end-1),:) - s_3d(:,2:end,:))))) ;
type_c_surfaces_3d = sum(sum(sum(abs(s_3d(1:(end-1),:,:) - s_3d(2:end,:,:))))) ;

surface_area_3d = (type_a_surfaces_3d * dx * dy) ...
                + (type_b_surfaces_3d * dx * dz) ...
                + (type_c_surfaces_3d * dy * dz) ;
disp('      Finished calculating surface area.') ;

disp('   Finished calculating size metrics.') ;

%**************************************************************************
% Calculate shape metrics.
%**************************************************************************

disp('   Calculating shape metrics ...') ;

% Calculate the sphericity.

disp('      Calculating sphericity ...') ;
sphericity_3d = (pi^(1/3)) * ((6 * volume_3d)^(2/3)) / surface_area_3d ;
disp('      Finished calculating sphericity.') ;

% Calculate the compactness. Compactness is sphericity cubed.

disp('      Calculating compactness ...') ;
compactness_3d = (36 * pi * (volume_3d^2)) / (surface_area_3d^3) ;
disp('      Finished calculating compactness.') ;

% Calculate the principal rotational moments.
% This calculation uses the binary segmentation image.
% See http://en.wikipedia.org/Moment_of_inertia for a definition of the
% tensor matrix that is calculated.
% The tensor matrix is then diagonalized using a singular-value
% decomposition (SVD) and normalized to have unit energy so that it is
% independent of size.

disp('      Calculating principal rotational moments ...') ;

% Find the centroid. This will be a tuple.

x = 1:width ;
y = 1:height ;
z = 1:depth ;
[X, Y, Z] = meshgrid(x, y, z) ;
x_c = sum(sum(sum(s_3d .* X))) / number_voxels_inside_3d ;
y_c = sum(sum(sum(s_3d .* Y))) / number_voxels_inside_3d ;
z_c = sum(sum(sum(s_3d .* Z))) / number_voxels_inside_3d ;
clear X Y Z ;

x_shift = x - x_c ;
y_shift = y - y_c ;
z_shift = z - z_c ;
[X_shift, Y_shift, Z_shift] = meshgrid(x_shift, y_shift, z_shift) ;
clear x y z x_c y_c z_c x_shift y_shift z_shift ;

x_sq_term_3d = sum(sum(sum((s_3d .* X_shift).^2))) / number_voxels_inside_3d ;
y_sq_term_3d = sum(sum(sum((s_3d .* Y_shift).^2))) / number_voxels_inside_3d ;
z_sq_term_3d = sum(sum(sum((s_3d .* Z_shift).^2))) / number_voxels_inside_3d ;

xy_term_3d   = sum(sum(sum((s_3d .* X_shift) .* (s_3d .* Y_shift)))) / number_voxels_inside_3d ;
xz_term_3d   = sum(sum(sum((s_3d .* X_shift) .* (s_3d .* Z_shift)))) / number_voxels_inside_3d ;
yz_term_3d   = sum(sum(sum((s_3d .* Y_shift) .* (s_3d .* Z_shift)))) / number_voxels_inside_3d ;
clear X_shift Y_shift Z_shift ;

% Define the tensor as shown on the wikipedia web page.

I11_3d = y_sq_term_3d + z_sq_term_3d ;
I22_3d = x_sq_term_3d + z_sq_term_3d ;
I33_3d = x_sq_term_3d + y_sq_term_3d ;

I12_3d = xy_term_3d ;
I21_3d = I12_3d ;

I13_3d = xz_term_3d ;
I31_3d = I13_3d ;

I23_3d = yz_term_3d ;
I32_3d = I23_3d ;

clear x_sq_term_3d y_sq_term_3d z_sq_term_3d xy_term_3d xz_term_3d yz_term_3d ;

I_matrix_3d = [ I11_3d -I12_3d -I13_3d ; ...
               -I21_3d  I22_3d -I23_3d ; ...
               -I31_3d -I32_3d  I33_3d] ;
clear I11_3d I12_3d I13_3d I21_3d I22_3d I23_3d I31_3d I32_3d I33_3d ;

% Diagonalize it. The r_i_3d are the answers we seek.

[U, S, V] = svd(I_matrix_3d) ;
norm_fac = sqrt(sum(diag(S) .^ 2)) ;
r_1_3d = S(1,1) / norm_fac ;
r_2_3d = S(2,2) / norm_fac ;
r_3_3d = S(3,3) / norm_fac ;
clear norm_fac U S V I_matrix_3d ;

ratio_max_min_3d = r_1_3d / r_3_3d ;

disp('      Finished calculating principal rotational moments.') ;

disp('   Finished calculating shape metrics.') ;

%**************************************************************************
% Calculate attenuation value metrics.
%**************************************************************************

disp('   Calculating attenuation value metrics ...') ;
index_inside_3d  = find(s_3d == 1) ;
disp('      Calculating mean of attenuation values ...') ;
mean_gray_3d     = mean(g_3d(index_inside_3d)) ;
disp('      Finished calculating mean of attenuation values.') ;
disp('      Calculating standard deviation of attenuation values ...') ;
std_gray_3d      = std(g_3d(index_inside_3d))  ;
disp('      Finished calculating standard deviation of attenuation values.') ;
disp('      Calculating variance of attenuation values ...') ;
var_gray_3d      = var(g_3d(index_inside_3d))  ;
disp('      Finished calculating variance of attenuation values.') ;
disp('      Calculating skewness of attenuation values ...') ;
skewness_gray_3d = skewness(g_3d(index_inside_3d)) ;
disp('      Finished calculating skewness of attenuation values.') ;
disp('      Calculating kurtosis of attenuation values ...') ;
kurtosis_gray_3d = kurtosis(g_3d(index_inside_3d)) ;
disp('      Finished calculating kurtosis of attenuation values.') ;
disp('      Calculating entropy of attenuation values ...') ;
entropy_gray_3d  = entropy(g_3d(index_inside_3d)) ;
disp('      Finished calculating entropy of attenuation values.') ;

disp('      Calculating number of voxels in various ranges of thresholds ...') ;
g_3d_masked = g_3d .* s_3d ;
num_gt_100_3d      = length(find( g_3d_masked >  100)) ;
num_gt_150_3d      = length(find( g_3d_masked >  150)) ;
num_gt_200_3d      = length(find( g_3d_masked >  200)) ;
num_n100_to_n40_3d = length(find((g_3d_masked > -100) & (g_3d_masked <= -40))) ;
num_lt_n100_3d     = length(find( g_3d_masked < -100)) ;
pct_gt_100_3d      = (num_gt_100_3d      / number_voxels_inside_3d) * 100 ;
pct_gt_150_3d      = (num_gt_150_3d      / number_voxels_inside_3d) * 100 ;
pct_gt_200_3d      = (num_gt_200_3d      / number_voxels_inside_3d) * 100 ;
pct_n100_to_n40_3d = (num_n100_to_n40_3d / number_voxels_inside_3d) * 100 ;
pct_lt_n100_3d     = (num_lt_n100_3d     / number_voxels_inside_3d) * 100 ;
clear g_3d_masked ;
disp('      Finished calculating number of voxels in various ranges of thresholds.') ;
disp('   Finished calculating attenuation value metrics.') ;

%**************************************************************************
% Calculate texture metrics.
% Start by differencing the grayscale images with nearest neighbors.
%**************************************************************************

disp('   Calculating texture metrics ...') ;
kern = zeros(3, 3, 3) ;
q = -1/6 ;
kern(:,:,1) = [0 0 0 ; ...
               0 q 0 ; ...
               0 0 0] ;
kern(:,:,2) = [0 q 0 ; ...
               q 1 q ; ...
               0 q 0] ;
kern(:,:,3) = [0 0 0 ; ...
               0 q 0 ; ...
               0 0 0] ;
g_3d_diff = convn(g_3d, kern, 'same') ;
disp('      Calculating mean of difference images ...') ;
mean_gray_diff_3d     = mean(g_3d_diff(index_inside_3d)) ;
disp('      Finished calculating mean of difference images.') ;
disp('      Calculating standard deviation of difference images ...') ;
std_gray_diff_3d      = std(g_3d_diff(index_inside_3d)) ;
disp('      Finished calculating standard deviation of difference images.') ;
disp('      Calculating variance of difference images ...') ;
var_gray_diff_3d      = var(g_3d_diff(index_inside_3d))  ;
disp('      Finished calculating variance of difference images.') ;
disp('      Calculating skewness of difference images ...') ;
skewness_gray_diff_3d = skewness(g_3d_diff(index_inside_3d)) ;
disp('      Finished calculating skewness of difference images.') ;
disp('      Calculating kurtosis of difference images ...') ;
kurtosis_gray_diff_3d = kurtosis(g_3d_diff(index_inside_3d)) ;
disp('      Finished calculating kurtosis of difference images.') ;
disp('      Calculating entropy of difference images ...') ;
entropy_gray_diff_3d  = entropy(g_3d_diff(index_inside_3d)) ;
disp('      Finished calculating entropy of difference images.') ;
disp('      Calculating correlation metric of difference images ...') ;
disp('         PLACEHOLDER FOR 3D CORRELATION METRIC') ;
correlation_metric_3d = -9999.0 ;
disp('      Finished calculating correlation metric of difference images.') ;
disp('      Calculating lacunarity of difference images ...') ;
disp('         PLACEHOLDER FOR 3D LACUNARITY METRIC') ;
lacunarity_metric_3d  = -9999.0 ;
disp('      Finished calculating lacunarity of difference images.') ;
clear g_3d_diff q kern ;
disp('   Finished calculating texture metrics.') ;

%**************************************************************************
% Calculate margin metrics.
%**************************************************************************

disp('   Calculating margin metrics ...') ;

% Calculate the mean distance to surface.

if (fast_only == 0)
   
   disp('      Calculating distance to surface ...') ;
   dist_img_name_3d = [filename_root '_3d.dst'] ;
   fid_3d = fopen(dist_img_name_3d, 'w') ;

   disp('         Finding border voxels ...') ;
   kern = ones(3,3,3) ;
   border_3d = sign((1 - s_3d) .* convn(s_3d, kern, 'same')) ;
   clear kern ;
   [iii_list, jjj_list, kkk_list] = ind2sub(size(s_3d), find(border_3d > 0)) ;
   disp('         Finished finding border voxels.') ;

   disp('         Allocating 3D image for distance to surface ...') ;
   dist_exterior_3d = single(zeros(height, width)) ;
   disp('         Finished allocating 3D image for distance to surface.') ;

   summed_distance_3d = 0.0 ;

   for k = 1:depth
      nnztp = length(find(s_3d(:, :, k) > 0)) ;
      disp_string = ['         Plane ' num2str(k) ' out of ' ...
         num2str(depth) ', ' num2str(nnztp) ...
         ' voxels inside the nodule. '   datestr(now())] ;
      disp(disp_string) ;
      clear nnztp disp_string ;
      term_3 = ((k - kkk_list) * dz).^2 ;
      for j = 1:width
         term_2 = ((j - jjj_list) * dx).^2 ;
         for i = 1:height
            if (s_3d(i,j,k) == 1)
               term_1 = ((i - iii_list) * dy).^2 ;
               dist_sq_vec = term_1 + term_2 + term_3 ;
               dist_exterior_3d(i, j) = sqrt(min(dist_sq_vec)) ;
               summed_distance_3d = summed_distance_3d + dist_exterior_3d(i, j) ;
            end
         end
      end
      count = fwrite(fid_3d, dist_exterior_3d, 'single') ;
   end
   clear term_1 term_2 dist_sq_vec dist_exterior_3d iii_list jjj_list kkk_list i j k ;
   mean_distance_3d = summed_distance_3d / number_voxels_inside_3d ;
   norm_summed_distance_3d = summed_distance_3d / (volume_3d^(1/3)) ;
   norm_mean_distance_3d = mean_distance_3d / (volume_3d^(1/3)) ;

   fclose(fid_3d) ;
   clear fid_3d ;
   disp('      Finished calculating distance to surface.') ;
   
else
   
   disp('      Deliberately skipping calculating distance to surface ...') ;
   summed_distance_3d      = -9999.0 ;
   mean_distance_3d        = -9999.0 ;
   norm_summed_distance_3d = -9999.0 ;
   norm_mean_distance_3d   = -9999.0 ;
   disp('      Finished deliberately skipping calculating distance to surface.') ;

end

% Calculate the fractal dimension of the 3D volume.

disp('      Calculating fractal dimension of the volume ...') ;
[n_temp_vol_3d, r_temp_vol_3d] = boxcount(s_3d, 'slope') ;
s_temp_vol_3d = -gradient(log(n_temp_vol_3d)) ./ gradient(log(r_temp_vol_3d)) ;
fract_dim_vol_3d = median(s_temp_vol_3d) ;
pause(5) ;
close ;
% clear n_temp_vol_3d r_temp_vol_3d s_temp_vol_3d ;
disp('      Finished calculating fractal dimension of the volume.') ;

% Calculate the fractal dimension of the border surface of the 3D volume.

disp('      Calculating fractal dimension of the border surface of the volume ...') ;
if (fast_only ~= 0)
   disp('         Finding border voxels ...') ;
   kern = ones(3,3,3) ;
   border_3d = sign((1 - s_3d) .* convn(s_3d, kern, 'same')) ;
   clear kern ;
   disp('         Finished finding border voxels.') ;
end
[n_temp_surf_3d, r_temp_surf_3d] = boxcount(border_3d, 'slope') ;
s_temp_surf_3d = -gradient(log(n_temp_surf_3d)) ./ gradient(log(r_temp_surf_3d)) ;
fract_dim_surf_3d = median(s_temp_surf_3d) ;
pause(5) ;
close ;
% clear n_temp_surf_3d r_temp_surf_3d s_temp_surf_3d ;
clear border_3d ;
disp('      Finished calculating fractal dimension of the border surface of the volume.') ;

% Calculate volume versus threshold.

disp('      Calculating volume versus threshold ...') ;
thresh_3d_vec = gray_threshold + ((0:45) * delta_thresh) ;
volume_3d_vec = zeros(size(thresh_3d_vec)) ;
for index = 1:length(thresh_3d_vec)
   volume_3d_vec(index) = length(find(g_3d(index_inside_3d) >= thresh_3d_vec(index))) * dx * dy * dz ;
end
clear index ;
disp('      Finished calculating volume versus threshold.') ;

% Calculate gradient margin metric.

disp('      Calculating gradient margin metric ...') ;
disp('         PLACEHOLDER FOR 3D GRADIENT MARGIN METRIC') ;
gradient_margin_3d = -9999.0 ;
disp('      Finished calculating gradient margin metric.') ;

disp('   Finished calculating margin metrics.') ;

disp('FINISHED CALCULATING 3-D METRICS.') ;




%**************************************************************************
%**************************************************************************
%**************************************************************************
% CALCULATE 2-D METRICS
%**************************************************************************
%**************************************************************************
%**************************************************************************

disp('CALCULATING 2-D METRICS ...') ;

max_inside_2d = 0 ;
plane_index_of_maximal_area = 0 ;
for i = 1:depth
   test = sum(sum(s_3d(:,:,i))) ;
   if (test > max_inside_2d)
      max_inside_2d = test ;
      plane_index_of_maximal_area = i ;
   end
end
s_2d = s_3d(:,:,plane_index_of_maximal_area) ;
g_2d = g_3d(:,:,plane_index_of_maximal_area) ;
clear max_inside_2d i test ;

%**************************************************************************
% Calculate size metrics ...') ;
%**************************************************************************

disp('   Calculating size metrics ...') ;

% Calculate the area.

disp('      Calculating area ...') ;
number_pixels_inside_2d = sum(sum(s_2d)) ;
area_2d = number_pixels_inside_2d * dx * dy ;
disp('      Finished calculating area.') ;

% Calculate a bounding box.

disp('      Calculating bounding box ...') ;
[iii_list, jjj_list] = ind2sub(size(s_2d), find(s_2d > 0)) ;
x_span_2d = (max(jjj_list) - min(jjj_list)) * dx ;
y_span_2d = (max(iii_list) - min(iii_list)) * dy ;
clear iii_list jjj_list ;
disp('      Finished calculating bounding box.') ;

% Calculate the perimeter.

disp('      Calculating perimeter ...') ;
type_b_edges_2d = sum(sum(abs(s_2d(:,1:(end-1)) - s_2d(:,2:end)))) ;
type_c_edges_2d = sum(sum(abs(s_2d(1:(end-1),:) - s_2d(2:end,:)))) ;

perimeter_2d = (type_b_edges_2d * dx) ...
             + (type_c_edges_2d * dy) ;
disp('      Finished calculating perimeter.') ;

disp('   Finished calculating size metrics.') ;

%**************************************************************************
% Calculate shape metrics.
%**************************************************************************

disp('   Calculating shape metrics ...') ;

% Calculate the circularity (McNitt-Gray's definition).

disp('      Calculating circularity ...') ;
circularity_2d = (4 * pi * area_2d) / (perimeter_2d^2) ;
disp('      Finished calculating circularity.') ;

% Calculate the principal rotational moments.
% This calculation uses the binary segmentation image.
% See http://en.wikipedia.org/Moment_of_inertia for a definition of the
% tensor matrix that is calculated (modified for 2D).
% The tensor matrix is then diagonalized using a singular-value
% decomposition (SVD) and normalized to have unit energy so that it is
% independent of size.

disp('      Calculating principal rotational moments ...') ;

% Find the centroid. This will be an ordered pair.

x = 1:width ;
y = 1:height ;
[X, Y] = meshgrid(x, y) ;
x_c = sum(sum(s_2d .* X)) / number_pixels_inside_2d ;
y_c = sum(sum(s_2d .* Y)) / number_pixels_inside_2d ;
clear X Y ;

x_shift = x - x_c ;
y_shift = y - y_c ;
[X_shift, Y_shift] = meshgrid(x_shift, y_shift) ;
clear x y x_c y_c x_shift y_shift ;

x_sq_term_2d = sum(sum((s_2d .* X_shift).^2)) / number_pixels_inside_2d ;
y_sq_term_2d = sum(sum((s_2d .* Y_shift).^2)) / number_pixels_inside_2d ;

xy_term_2d   = sum(sum((s_2d .* X_shift) .* (s_2d .* Y_shift))) / number_pixels_inside_2d ;

clear X_shift Y_shift Z_shift ;

% Define the tensor as shown on the wikipedia web page, but modified for
% 2D.

I11_2d = y_sq_term_2d ;
I22_2d = x_sq_term_2d ;

I12_2d = xy_term_2d ;
I21_2d = I12_2d ;

clear x_sq_term_2d y_sq_term_2d xy_term_2d ;

I_matrix_2d = [ I11_2d -I12_2d ; ...
               -I21_2d  I22_2d] ;
clear I11_2d I12_2d I21_2d I22_2d ;

% Diagonalize it. The r_i_2d are the answers we seek.

[U, S, V] = svd(I_matrix_2d) ;
norm_fac = sqrt(sum(diag(S) .^ 2)) ;
r_1_2d = S(1,1) / norm_fac ;
r_2_2d = S(2,2) / norm_fac ;
clear norm_fac U S V I_matrix_2d ;

ratio_max_min_2d = r_1_2d / r_2_2d ;

disp('      Finished calculating principal rotational moments.') ;

disp('   Finished calculating shape metrics.') ;

%**************************************************************************
% Calculate attenuation value metrics.
%**************************************************************************

disp('   Calculating attenuation value metrics ...') ;
index_inside_2d  = find(s_2d == 1) ;
disp('      Calculating mean of attenuation values ...') ;
mean_gray_2d     = mean(g_2d(index_inside_2d)) ;
disp('      Finished calculating mean of attenuation values.') ;
disp('      Calculating standard deviation of attenuation values ...') ;
std_gray_2d      = std(g_2d(index_inside_2d))  ;
disp('      Finished calculating standard deviation of attenuation values.') ;
disp('      Calculating variance of attenuation values ...') ;
var_gray_2d      = var(g_2d(index_inside_2d))  ;
disp('      Finished calculating variance of attenuation values.') ;
disp('      Calculating skewness of attenuation values ...') ;
skewness_gray_2d = skewness(g_2d(index_inside_2d)) ;
disp('      Finished calculating skewness of attenuation values.') ;
disp('      Calculating kurtosis of attenuation values ...') ;
kurtosis_gray_2d = kurtosis(g_2d(index_inside_2d)) ;
disp('      Finished calculating kurtosis of attenuation values.') ;
disp('      Calculating entropy of attenuation values ...') ;
entropy_gray_2d  = entropy(g_2d(index_inside_2d)) ;
disp('      Finished calculating entropy of attenuation values.') ;

disp('      Calculating number of voxels in various ranges of thresholds ...') ;
g_2d_masked = g_2d .* s_2d ;
num_gt_100_2d      = length(find( g_2d_masked >  100)) ;
num_gt_150_2d      = length(find( g_2d_masked >  150)) ;
num_gt_200_2d      = length(find( g_2d_masked >  200)) ;
num_n100_to_n40_2d = length(find((g_2d_masked > -100) & (g_2d_masked <= -40))) ;
num_lt_n100_2d     = length(find( g_2d_masked < -100)) ;
pct_gt_100_2d      = (num_gt_100_2d      / number_pixels_inside_2d) * 100 ;
pct_gt_150_2d      = (num_gt_150_2d      / number_pixels_inside_2d) * 100 ;
pct_gt_200_2d      = (num_gt_200_2d      / number_pixels_inside_2d) * 100 ;
pct_n100_to_n40_2d = (num_n100_to_n40_2d / number_pixels_inside_2d) * 100 ;
pct_lt_n100_2d     = (num_lt_n100_2d     / number_pixels_inside_2d) * 100 ;
clear g_2d_masked ;
disp('      Finished calculating number of voxels in various ranges of thresholds.') ;
disp('   Finished calculating attenuation value metrics.') ;

%**************************************************************************
% Calculate texture metrics.
% Start by differencing the grayscale images with nearest neighbors.
%**************************************************************************

disp('   Calculating texture metrics ...') ;
kern = zeros(3, 3) ;
q = -1/4 ;
kern = [0 q 0 ; ...
        q 1 q ; ...
        0 q 0] ;
g_2d_diff = convn(g_2d, kern, 'same') ;
disp('      Calculating mean of difference images ...') ;
mean_gray_diff_2d     = mean(g_2d_diff(index_inside_2d)) ;
disp('      Finished calculating mean of difference images.') ;
disp('      Calculating standard deviation of difference images ...') ;
std_gray_diff_2d      = std(g_2d_diff(index_inside_2d)) ;
disp('      Finished calculating standard deviation of difference images.') ;
disp('      Calculating variance of difference images ...') ;
var_gray_diff_2d      = var(g_2d_diff(index_inside_2d)) ;
disp('      Finished calculating variance of difference images.') ;
disp('      Calculating skewness of difference images ...') ;
skewness_gray_diff_2d = skewness(g_2d_diff(index_inside_2d)) ;
disp('      Finished calculating skewness of difference images.') ;
disp('      Calculating kurtosis of difference images ...') ;
kurtosis_gray_diff_2d = kurtosis(g_2d_diff(index_inside_2d)) ;
disp('      Finished calculating kurtosis of difference images.') ;
disp('      Calculating entropy of difference images ...') ;
entropy_gray_diff_2d  = entropy(g_2d_diff(index_inside_2d)) ;
disp('      Finished calculating entropy of difference images.') ;
disp('      Calculating correlation metric of difference images ...') ;
disp('         PLACEHOLDER FOR 2D CORRELATION METRIC') ;
correlation_metric_2d = -9999.0 ;
disp('      Finished calculating correlation metric of difference images.') ;
disp('      Calculating lacunarity of difference images ...') ;
disp('         PLACEHOLDER FOR 2D LACUNARITY METRIC') ;
lacunarity_metric_2d  = -9999.0 ;
disp('      Finished calculating lacunarity of difference images.') ;
clear g_2d_diff q kern ;
disp('   Finished calculating texture metrics.') ;

%**************************************************************************
% Calculate margin metrics.
%**************************************************************************

disp('   Calculating margin metrics ...') ;

% Calculate the mean distance to surface.

disp('      Calculating distance to surface ...') ;
dist_img_name_2d = [filename_root '_2d.dst'] ;
fid_2d = fopen(dist_img_name_2d, 'w') ;

disp('         Finding border voxels ...') ;
kern = ones(3,3) ;
border_2d = sign((1 - s_2d) .* convn(s_2d, kern, 'same')) ;
clear kern ;
[iii_list, jjj_list] = ind2sub(size(s_2d), find(border_2d > 0)) ;
disp('         Finished finding border voxels.') ;

disp('         Allocating 2D image for distance to surface ...') ;
dist_exterior_2d = single(zeros(height, width)) ;
disp('         Finished allocating 2D image for distance to surface.') ;

summed_distance_2d = 0.0 ;

for j = 1:width
   term_2 = ((j - jjj_list) * dx).^2 ;
   for i = 1:height
      if (s_2d(i,j) == 1)
         term_1 = ((i - iii_list) * dy).^2 ;
         dist_sq_vec = term_1 + term_2 ;
         dist_exterior_2d(i, j) = sqrt(min(dist_sq_vec)) ;
         summed_distance_2d = summed_distance_2d + dist_exterior_2d(i, j) ;
      end
   end
end
count = fwrite(fid_2d, dist_exterior_2d, 'single') ;
clear count dist_sq_vec term_1 term_2 dist_exterior_2d iii_list jjj_list i j ;
mean_distance_2d = summed_distance_2d / number_pixels_inside_2d ;
norm_summed_distance_2d = summed_distance_2d / (area_2d^(1/2)) ;
norm_mean_distance_2d = mean_distance_2d / (area_2d^(1/2)) ;

fclose(fid_2d) ;
clear fid_2d ;
disp('      Finished calculating distance to surface.') ;

% Calculate the fractal dimension of the 2D area.

disp('      Calculating fractal dimension of the area ...') ;
[n_temp_area_2d, r_temp_area_2d] = boxcount(s_2d, 'slope') ;
s_temp_area_2d = -gradient(log(n_temp_area_2d)) ./ gradient(log(r_temp_area_2d)) ;
fract_dim_area_2d = median(s_temp_area_2d) ;
pause(5) ;
close ;
% clear n_temp_area_2d r_temp_area_2d s_temp_area_2d ;
disp('      Finished calculating fractal dimension of the area.') ;

% Calculate the fractal dimension of the perimeter of the 2D area.

disp('      Calculating fractal dimension of the perimeter of the area ...') ;
[n_temp_perim_2d, r_temp_perim_2d] = boxcount(border_2d, 'slope') ;
s_temp_perim_2d = -gradient(log(n_temp_perim_2d)) ./ gradient(log(r_temp_perim_2d)) ;
fract_dim_perim_2d = median(s_temp_perim_2d) ;
pause(5) ;
close ;
% clear n_temp_perim_2d r_temp_perim_2d s_temp_perim_2d ;
clear border_2d ;
disp('      Finished calculating fractal dimension of the perimeter of the area ...') ;

% Calculate area versus threshold.

disp('      Calculating area versus threshold ...') ;
thresh_2d_vec = gray_threshold + ((0:45) * delta_thresh) ;
area_2d_vec = zeros(size(thresh_2d_vec)) ;
for index = 1:length(thresh_2d_vec)
   area_2d_vec(index) = length(find(g_2d(index_inside_2d) >= thresh_2d_vec(index))) * dx * dy ;
end
clear index ;
disp('      Finished calculating area versus threshold.') ;

% Calculate gradient margin metric.

disp('      Calculating gradient margin metric ...') ;
disp('         PLACEHOLDER FOR 2D GRADIENT MARGIN METRIC') ;
gradient_margin_2d = -9999.0 ;
disp('      Finished calculating gradient margin metric.') ;

disp('   Finished calculating margin metrics.') ;

disp('FINISHED CALCULATING 2-D METRICS.') ;

% Save the results in a Matlab ".mat" file. Clear the big arrays first.

clear ans g_2d g_3d s_2d s_3d index_inside_2d index_inside_3d ;
filename_mat  = [filename_root '.mat'] ;
eval_string = ['save ''' filename_mat ''''] ;
eval(eval_string) ;

clear disp_string eval_string ;

% Print the results on the screen.

format long ;
disp(' ') ;
disp(' ') ;
disp(['Filename of grayscale image = ' filename_gray]) ;
disp(['   Filename of binary image = ' filename_bin]) ;
disp([' ']) ;
disp(['                             Kernel = ' kernel]) ;
disp(['                       Delta height = ' num2str(dy)]) ;
disp(['                        Delta width = ' num2str(dx)]) ;
disp(['                        Delta depth = ' num2str(dz)]) ;
disp(['     Height of input image (# rows) = ' num2str(height)]) ;
disp(['   Width of input image (# columns) = ' num2str(width)]) ;
disp(['    Depth of input image (# planes) = ' num2str(depth)]) ;
disp([' ']) ;
disp(['                Segmentation Number = ' num2str(segmentation_num, '%02d')]) ;
disp(['             Segmentation Threshold = ' num2str(gray_threshold)]) ;
disp([' ']) ;
disp([' Lung nodule analysis (lna) version = ' num2str(LNA_VERSION, '%01d')]) ;
disp([' ']) ;
disp(['****************************** STATISTICS FOR 3D ******************************']) ;
disp(['********** Size Metrics **********']) ;
disp(['                                      Number of voxels inside = ' num2str(number_voxels_inside_3d)]) ;
disp(['                                                       Volume = ' num2str(volume_3d)]) ;
disp(['                           Span of nodule in x direction (mm) = ' num2str(x_span_3d)]) ;
disp(['                           Span of nodule in y direction (mm) = ' num2str(y_span_3d)]) ;
disp(['                           Span of nodule in z direction (mm) = ' num2str(z_span_3d)]) ;
disp(['                                                 Surface Area = ' num2str(surface_area_3d)]) ;
disp(['********** Shape Metrics **********']) ; 
disp(['                                                   Sphericity = ' num2str(sphericity_3d)]) ;
disp(['                                                  Compactness = ' num2str(compactness_3d)]) ;
disp(['                                       Rotational moment, r_1 = ' num2str(r_1_3d)]) ;
disp(['                                       Rotational moment, r_2 = ' num2str(r_2_3d)]) ;
disp(['                                       Rotational moment, r_3 = ' num2str(r_3_3d)]) ;
disp(['               Ratio of largest to smallest rotational moment = ' num2str(ratio_max_min_3d)]) ;
disp(['********** Attenuation Metrics **********']) ;
disp(['                                     Mean of HU inside nodule = ' num2str(mean_gray_3d)]) ;
disp(['                       Standard Deviation of HU inside nodule = ' num2str(std_gray_3d)]) ;
disp(['                                 Variance of HU inside nodule = ' num2str(var_gray_3d)]) ;
disp(['                                 Skewness of HU inside nodule = ' num2str(skewness_gray_3d)]) ;
disp(['                                 Kurtosis of HU inside nodule = ' num2str(kurtosis_gray_3d)]) ;
disp(['                                  Entropy of HU inside nodule = ' num2str(entropy_gray_3d)]) ;
disp(['                    Number of voxels with HU greater than 100 = ' num2str(num_gt_100_3d)]) ;
disp(['                    Number of voxels with HU greater than 150 = ' num2str(num_gt_150_3d)]) ;
disp(['                    Number of voxels with HU greater than 200 = ' num2str(num_gt_200_3d)]) ;
disp(['                Number of voxels with HU between -100 and -40 = ' num2str(num_n100_to_n40_3d)]) ;
disp(['                      Number of voxels with HU less than -100 = ' num2str(num_lt_n100_3d)]) ;
disp(['                   Percent of voxels with HU greater than 100 = ' num2str(pct_gt_100_3d)]) ;
disp(['                   Percent of voxels with HU greater than 150 = ' num2str(pct_gt_150_3d)]) ;
disp(['                   Percent of voxels with HU greater than 200 = ' num2str(pct_gt_200_3d)]) ;
disp(['               Percent of voxels with HU between -100 and -40 = ' num2str(pct_n100_to_n40_3d)]) ;
disp(['                     Percent of voxels with HU less than -100 = ' num2str(pct_lt_n100_3d)]) ;
disp(['********** Texture Metrics **********']) ;
disp(['                 Mean of difference image of HU inside nodule = ' num2str(mean_gray_diff_3d)]) ;
disp(['   Standard Deviation of difference image of HU inside nodule = ' num2str(std_gray_diff_3d)]) ;
disp(['             Variance of difference image of HU inside nodule = ' num2str(var_gray_diff_3d)]) ;
disp(['             Skewness of difference image of HU inside nodule = ' num2str(skewness_gray_diff_3d)]) ;
disp(['             Kurtosis of difference image of HU inside nodule = ' num2str(kurtosis_gray_diff_3d)]) ;
disp(['              Entropy of difference image of HU inside nodule = ' num2str(entropy_gray_diff_3d)]) ;
disp(['   Correlation metric of difference image of HU inside nodule = ' num2str(correlation_metric_3d)]) ;
disp(['    Lacunarity metric of difference image of HU inside nodule = ' num2str(lacunarity_metric_3d)]) ;
disp(['********** Margin Metrics **********']) ;
disp(['                                              Summed distance = ' num2str(summed_distance_3d)]) ;
disp(['                                                Mean distance = ' num2str(mean_distance_3d)]) ;
disp(['                                   Normalized summed distance = ' num2str(norm_summed_distance_3d)]) ;
disp(['                                     Normalized mean distance = ' num2str(norm_mean_distance_3d)]) ;
disp(['                                  Fractal dimension of volume = ' num2str(fract_dim_vol_3d)]) ;
disp(['                                 Fractal dimension of surface = ' num2str(fract_dim_surf_3d)]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(01)), ' Volume = ', num2str(volume_3d_vec(01))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(02)), ' Volume = ', num2str(volume_3d_vec(02))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(03)), ' Volume = ', num2str(volume_3d_vec(03))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(04)), ' Volume = ', num2str(volume_3d_vec(04))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(05)), ' Volume = ', num2str(volume_3d_vec(05))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(06)), ' Volume = ', num2str(volume_3d_vec(06))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(07)), ' Volume = ', num2str(volume_3d_vec(07))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(08)), ' Volume = ', num2str(volume_3d_vec(08))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(09)), ' Volume = ', num2str(volume_3d_vec(09))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(10)), ' Volume = ', num2str(volume_3d_vec(10))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(11)), ' Volume = ', num2str(volume_3d_vec(11))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(12)), ' Volume = ', num2str(volume_3d_vec(12))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(13)), ' Volume = ', num2str(volume_3d_vec(13))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(14)), ' Volume = ', num2str(volume_3d_vec(14))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(15)), ' Volume = ', num2str(volume_3d_vec(15))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(16)), ' Volume = ', num2str(volume_3d_vec(16))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(17)), ' Volume = ', num2str(volume_3d_vec(17))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(18)), ' Volume = ', num2str(volume_3d_vec(18))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(19)), ' Volume = ', num2str(volume_3d_vec(19))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(20)), ' Volume = ', num2str(volume_3d_vec(20))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(21)), ' Volume = ', num2str(volume_3d_vec(21))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(22)), ' Volume = ', num2str(volume_3d_vec(22))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(23)), ' Volume = ', num2str(volume_3d_vec(23))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(24)), ' Volume = ', num2str(volume_3d_vec(24))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(25)), ' Volume = ', num2str(volume_3d_vec(25))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(26)), ' Volume = ', num2str(volume_3d_vec(26))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(27)), ' Volume = ', num2str(volume_3d_vec(27))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(28)), ' Volume = ', num2str(volume_3d_vec(28))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(29)), ' Volume = ', num2str(volume_3d_vec(29))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(30)), ' Volume = ', num2str(volume_3d_vec(30))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(31)), ' Volume = ', num2str(volume_3d_vec(31))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(32)), ' Volume = ', num2str(volume_3d_vec(32))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(33)), ' Volume = ', num2str(volume_3d_vec(33))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(34)), ' Volume = ', num2str(volume_3d_vec(34))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(35)), ' Volume = ', num2str(volume_3d_vec(35))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(36)), ' Volume = ', num2str(volume_3d_vec(36))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(37)), ' Volume = ', num2str(volume_3d_vec(37))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(38)), ' Volume = ', num2str(volume_3d_vec(38))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(39)), ' Volume = ', num2str(volume_3d_vec(39))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(40)), ' Volume = ', num2str(volume_3d_vec(40))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(41)), ' Volume = ', num2str(volume_3d_vec(41))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(42)), ' Volume = ', num2str(volume_3d_vec(42))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(43)), ' Volume = ', num2str(volume_3d_vec(43))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(44)), ' Volume = ', num2str(volume_3d_vec(44))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(45)), ' Volume = ', num2str(volume_3d_vec(45))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_3d_vec(46)), ' Volume = ', num2str(volume_3d_vec(46))]) ;
disp(['                                       Gradient margin metric = ' num2str(gradient_margin_3d)]) ;
disp(['****************************** STATISTICS FOR 2D ******************************']) ;
disp(['                           Transverse plane with maximal area = ' num2str(plane_index_of_maximal_area)]) ;
disp(['********** Size Metrics **********']) ;
disp(['                                      Number of pixels inside = ' num2str(number_pixels_inside_2d)]) ;
disp(['                                                         Area = ' num2str(area_2d)]) ;
disp(['                           Span of nodule in x direction (mm) = ' num2str(x_span_2d)]) ;
disp(['                           Span of nodule in y direction (mm) = ' num2str(y_span_2d)]) ;
disp(['                                                    Perimeter = ' num2str(perimeter_2d)]) ;
disp(['********** Shape Metrics **********']) ;
disp(['                                                  Circularity = ' num2str(circularity_2d)]) ;
disp(['                                       Rotational moment, r_1 = ' num2str(r_1_2d)]) ;
disp(['                                       Rotational moment, r_2 = ' num2str(r_2_2d)]) ;
disp(['               Ratio of largest to smallest rotational moment = ' num2str(ratio_max_min_2d)]) ;
disp(['********** Attenuation Metrics **********']) ;
disp(['                                     Mean of HU inside nodule = ' num2str(mean_gray_2d)]) ;
disp(['                       Standard Deviation of HU inside nodule = ' num2str(std_gray_2d)]) ;
disp(['                                 Variance of HU inside nodule = ' num2str(var_gray_2d)]) ;
disp(['                                 Skewness of HU inside nodule = ' num2str(skewness_gray_2d)]) ;
disp(['                                 Kurtosis of HU inside nodule = ' num2str(kurtosis_gray_2d)]) ;
disp(['                                  Entropy of HU inside nodule = ' num2str(entropy_gray_2d)]) ;
disp(['                    Number of pixels with HU greater than 100 = ' num2str(num_gt_100_2d)]) ;
disp(['                    Number of pixels with HU greater than 150 = ' num2str(num_gt_150_2d)]) ;
disp(['                    Number of pixels with HU greater than 200 = ' num2str(num_gt_200_2d)]) ;
disp(['                Number of pixels with HU between -100 and -40 = ' num2str(num_n100_to_n40_2d)]) ;
disp(['                      Number of pixels with HU less than -100 = ' num2str(num_lt_n100_2d)]) ;
disp(['                   Percent of pixels with HU greater than 100 = ' num2str(pct_gt_100_2d)]) ;
disp(['                   Percent of pixels with HU greater than 150 = ' num2str(pct_gt_150_2d)]) ;
disp(['                   Percent of pixels with HU greater than 200 = ' num2str(pct_gt_200_2d)]) ;
disp(['               Percent of pixels with HU between -100 and -40 = ' num2str(pct_n100_to_n40_2d)]) ;
disp(['                     Percent of pixels with HU less than -100 = ' num2str(pct_lt_n100_2d)]) ;
disp(['********** Texture Metrics **********']) ;
disp(['                 Mean of difference image of HU inside nodule = ' num2str(mean_gray_diff_2d)]) ;
disp(['   Standard Deviation of difference image of HU inside nodule = ' num2str(std_gray_diff_2d)]) ;
disp(['             Variance of difference image of HU inside nodule = ' num2str(var_gray_diff_2d)]) ;
disp(['             Skewness of difference image of HU inside nodule = ' num2str(skewness_gray_diff_2d)]) ;
disp(['             Kurtosis of difference image of HU inside nodule = ' num2str(kurtosis_gray_diff_2d)]) ;
disp(['              Entropy of difference image of HU inside nodule = ' num2str(entropy_gray_diff_2d)]) ;
disp(['   Correlation metric of difference image of HU inside nodule = ' num2str(correlation_metric_2d)]) ;
disp(['    Lacunarity metric of difference image of HU inside nodule = ' num2str(lacunarity_metric_2d)]) ;
disp(['********** Margin Metrics **********']) ;
disp(['                                              Summed distance = ' num2str(summed_distance_2d)]) ;
disp(['                                                Mean distance = ' num2str(mean_distance_2d)]) ;
disp(['                                   Normalized summed distance = ' num2str(norm_summed_distance_2d)]) ;
disp(['                                     Normalized mean distance = ' num2str(norm_mean_distance_2d)]) ;
disp(['                                    Fractal dimension of area = ' num2str(fract_dim_area_2d)]) ;
disp(['                               Fractal dimension of perimeter = ' num2str(fract_dim_perim_2d)]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(01)), ' Volume = ', num2str(area_2d_vec(01))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(02)), ' Volume = ', num2str(area_2d_vec(02))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(03)), ' Volume = ', num2str(area_2d_vec(03))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(04)), ' Volume = ', num2str(area_2d_vec(04))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(05)), ' Volume = ', num2str(area_2d_vec(05))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(06)), ' Volume = ', num2str(area_2d_vec(06))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(07)), ' Volume = ', num2str(area_2d_vec(07))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(08)), ' Volume = ', num2str(area_2d_vec(08))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(09)), ' Volume = ', num2str(area_2d_vec(09))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(10)), ' Volume = ', num2str(area_2d_vec(10))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(11)), ' Volume = ', num2str(area_2d_vec(11))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(12)), ' Volume = ', num2str(area_2d_vec(12))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(13)), ' Volume = ', num2str(area_2d_vec(13))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(14)), ' Volume = ', num2str(area_2d_vec(14))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(15)), ' Volume = ', num2str(area_2d_vec(15))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(16)), ' Volume = ', num2str(area_2d_vec(16))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(17)), ' Volume = ', num2str(area_2d_vec(17))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(18)), ' Volume = ', num2str(area_2d_vec(18))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(19)), ' Volume = ', num2str(area_2d_vec(19))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(20)), ' Volume = ', num2str(area_2d_vec(20))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(21)), ' Volume = ', num2str(area_2d_vec(21))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(22)), ' Volume = ', num2str(area_2d_vec(22))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(23)), ' Volume = ', num2str(area_2d_vec(23))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(24)), ' Volume = ', num2str(area_2d_vec(24))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(25)), ' Volume = ', num2str(area_2d_vec(25))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(26)), ' Volume = ', num2str(area_2d_vec(26))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(27)), ' Volume = ', num2str(area_2d_vec(27))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(28)), ' Volume = ', num2str(area_2d_vec(28))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(29)), ' Volume = ', num2str(area_2d_vec(29))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(30)), ' Volume = ', num2str(area_2d_vec(30))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(31)), ' Volume = ', num2str(area_2d_vec(31))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(32)), ' Volume = ', num2str(area_2d_vec(32))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(33)), ' Volume = ', num2str(area_2d_vec(33))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(34)), ' Volume = ', num2str(area_2d_vec(34))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(35)), ' Volume = ', num2str(area_2d_vec(35))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(36)), ' Volume = ', num2str(area_2d_vec(36))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(37)), ' Volume = ', num2str(area_2d_vec(37))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(38)), ' Volume = ', num2str(area_2d_vec(38))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(39)), ' Volume = ', num2str(area_2d_vec(39))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(40)), ' Volume = ', num2str(area_2d_vec(40))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(41)), ' Volume = ', num2str(area_2d_vec(41))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(42)), ' Volume = ', num2str(area_2d_vec(42))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(43)), ' Volume = ', num2str(area_2d_vec(43))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(44)), ' Volume = ', num2str(area_2d_vec(44))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(45)), ' Volume = ', num2str(area_2d_vec(45))]) ;
disp(['                                                   Threshhold = ' num2str(thresh_2d_vec(46)), ' Volume = ', num2str(area_2d_vec(46))]) ;
disp(['                                       Gradient margin metric = ' num2str(gradient_margin_2d)]) ;


diary off ;

% Create comma-separated values list of output for easy importation
% into Excel.

diary_name_csv = [filename_root, '.csv'] ;
diary(diary_name_csv) ;

disp_string = [ ...
   'filename_gray,' ...
   'filename_bin,' ...
   'kernel,' ...
   'dy,' ...
   'dx,' ...
   'dz,' ...
   'height,' ...
   'width,' ...
   'depth,' ...
   'segmentation_num,' ...
   'gray_threshold,' ...
   'LNA_VERSION,' ...
   'number_voxels_inside_3d,' ...
   'volume_3d,' ...
   'x_span_3d (mm),' ...
   'y_span_3d (mm),' ...
   'z_span_3d (mm),' ...
   'surface_area_3d,' ...
   'sphericity_3d,' ...
   'compactness_3d,' ...
   'r_1_3d,' ...
   'r_2_3d,' ...
   'r_3_3d,' ...
   'ratio_max_min_3d,' ...
   'mean_gray_3d,' ...
   'std_gray_3d,' ...
   'var_gray_3d,' ...
   'skewness_gray_3d,' ...
   'kurtosis_gray_3d,' ...
   'entropy_gray_3d,' ...
   'num_gt_100_3d,' ...
   'num_gt_150_3d,' ...
   'num_gt_200_3d,' ...
   'num_n100_to_n40_3d,' ...
   'num_lt_n100_3d,' ...
   'pct_gt_100_3d,' ...
   'pct_gt_150_3d,' ...
   'pct_gt_200_3d,' ...
   'pct_n100_to_n40_3d,' ...
   'pct_lt_n100_3d,'...
   'mean_gray_diff_3d,' ...
   'std_gray_diff_3d,' ...
   'var_gray_diff_3d,' ...
   'skewness_gray_diff_3d,' ...
   'kurtosis_gray_diff_3d,' ...
   'entropy_gray_diff_3d,' ...
   'correlation_metric_3d,' ...
   'lacunarity_metric_3d,' ...
   'summed_distance_3d,' ...
   'mean_distance_3d,' ...
   'norm_summed_distance_3d,' ...
   'norm_mean_distance_3d,' ...
   'fract_dim_vol_3d,' ...
   'fract_dim_surf_3d,' ...
   'thresh_3d_vec(01),' ...
   'thresh_3d_vec(02),' ...
   'thresh_3d_vec(03),' ...
   'thresh_3d_vec(04),' ...
   'thresh_3d_vec(05),' ...
   'thresh_3d_vec(06),' ...
   'thresh_3d_vec(07),' ...
   'thresh_3d_vec(08),' ...
   'thresh_3d_vec(09),' ...
   'thresh_3d_vec(10),' ...
   'thresh_3d_vec(11),' ...
   'thresh_3d_vec(12),' ...
   'thresh_3d_vec(13),' ...
   'thresh_3d_vec(14),' ...
   'thresh_3d_vec(15),' ...
   'thresh_3d_vec(16),' ...
   'thresh_3d_vec(17),' ...
   'thresh_3d_vec(18),' ...
   'thresh_3d_vec(19),' ...
   'thresh_3d_vec(20),' ...
   'thresh_3d_vec(21),' ...
   'thresh_3d_vec(22),' ...
   'thresh_3d_vec(23),' ...
   'thresh_3d_vec(24),' ...
   'thresh_3d_vec(25),' ...
   'thresh_3d_vec(26),' ...
   'thresh_3d_vec(27),' ...
   'thresh_3d_vec(28),' ...
   'thresh_3d_vec(29),' ...
   'thresh_3d_vec(30),' ...
   'thresh_3d_vec(31),' ...
   'thresh_3d_vec(32),' ...
   'thresh_3d_vec(33),' ...
   'thresh_3d_vec(34),' ...
   'thresh_3d_vec(35),' ...
   'thresh_3d_vec(36),' ...
   'thresh_3d_vec(37),' ...
   'thresh_3d_vec(38),' ...
   'thresh_3d_vec(39),' ...
   'thresh_3d_vec(40),' ...
   'thresh_3d_vec(41),' ...
   'thresh_3d_vec(42),' ...
   'thresh_3d_vec(43),' ...
   'thresh_3d_vec(44),' ...
   'thresh_3d_vec(45),' ...
   'thresh_3d_vec(46),' ...
   'volume_3d_vec(01),' ...
   'volume_3d_vec(02),' ...
   'volume_3d_vec(03),' ...
   'volume_3d_vec(04),' ...
   'volume_3d_vec(05),' ...
   'volume_3d_vec(06),' ...
   'volume_3d_vec(07),' ...
   'volume_3d_vec(08),' ...
   'volume_3d_vec(09),' ...
   'volume_3d_vec(10),' ...
   'volume_3d_vec(11),' ...
   'volume_3d_vec(12),' ...
   'volume_3d_vec(13),' ...
   'volume_3d_vec(14),' ...
   'volume_3d_vec(15),' ...
   'volume_3d_vec(16),' ...
   'volume_3d_vec(17),' ...
   'volume_3d_vec(18),' ...
   'volume_3d_vec(19),' ...
   'volume_3d_vec(20),' ...
   'volume_3d_vec(21),' ...
   'volume_3d_vec(22),' ...
   'volume_3d_vec(23),' ...
   'volume_3d_vec(24),' ...
   'volume_3d_vec(25),' ...
   'volume_3d_vec(26),' ...
   'volume_3d_vec(27),' ...
   'volume_3d_vec(28),' ...
   'volume_3d_vec(29),' ...
   'volume_3d_vec(30),' ...
   'volume_3d_vec(31),' ...
   'volume_3d_vec(32),' ...
   'volume_3d_vec(33),' ...
   'volume_3d_vec(34),' ...
   'volume_3d_vec(35),' ...
   'volume_3d_vec(36),' ...
   'volume_3d_vec(37),' ...
   'volume_3d_vec(38),' ...
   'volume_3d_vec(39),' ...
   'volume_3d_vec(40),' ...
   'volume_3d_vec(41),' ...
   'volume_3d_vec(42),' ...
   'volume_3d_vec(43),' ...
   'volume_3d_vec(44),' ...
   'volume_3d_vec(45),' ...
   'volume_3d_vec(46),' ...
   'gradient_margin_3d,' ...
   'plane_index_of_maximal_area,' ...
   'number_pixels_inside_2d,' ...
   'area_2d,' ...
   'x_span_2d,' ...
   'y_span_2d,' ...
   'perimeter_2d,' ...
   'circularity_2d,' ...
   'r_1_2d,' ...
   'r_2_2d,' ...
   'ratio_max_min_2d,' ...
   'mean_gray_2d,' ...
   'std_gray_2d,' ...
   'var_gray_2d,' ...
   'skewness_gray_2d,' ...
   'kurtosis_gray_2d,' ...
   'entropy_gray_2d,' ...
   'num_gt_100_2d,' ...
   'num_gt_150_2d,' ...
   'num_gt_200_2d,' ...
   'num_n100_to_n40_2d,' ...
   'num_lt_n100_2d,' ...
   'pct_gt_100_2d,' ...
   'pct_gt_150_2d,' ...
   'pct_gt_200_2d,' ...
   'pct_n100_to_n40_2d,' ...
   'pct_lt_n100_2d,' ...
   'mean_gray_diff_2d,' ...
   'std_gray_diff_2d,' ...
   'var_gray_diff_2d,' ...
   'skewness_gray_diff_2d,' ...
   'kurtosis_gray_diff_2d,' ...
   'entropy_gray_diff_2d,' ...
   'correlation_metric_2d,' ...
   'lacunarity_metric_2d,' ...
   'summed_distance_2d,' ...
   'mean_distance_2d,' ...
   'norm_summed_distance_2d,' ...
   'norm_mean_distance_2d,' ...
   'fract_dim_area_2d,' ...
   'fract_dim_perim_2d,' ...
   'thresh_2d_vec(01),' ...
   'thresh_2d_vec(02),' ...
   'thresh_2d_vec(03),' ...
   'thresh_2d_vec(04),' ...
   'thresh_2d_vec(05),' ...
   'thresh_2d_vec(06),' ...
   'thresh_2d_vec(07),' ...
   'thresh_2d_vec(08),' ...
   'thresh_2d_vec(09),' ...
   'thresh_2d_vec(10),' ...
   'thresh_2d_vec(11),' ...
   'thresh_2d_vec(12),' ...
   'thresh_2d_vec(13),' ...
   'thresh_2d_vec(14),' ...
   'thresh_2d_vec(15),' ...
   'thresh_2d_vec(16),' ...
   'thresh_2d_vec(17),' ...
   'thresh_2d_vec(18),' ...
   'thresh_2d_vec(19),' ...
   'thresh_2d_vec(20),' ...
   'thresh_2d_vec(21),' ...
   'thresh_2d_vec(22),' ...
   'thresh_2d_vec(23),' ...
   'thresh_2d_vec(24),' ...
   'thresh_2d_vec(25),' ...
   'thresh_2d_vec(26),' ...
   'thresh_2d_vec(27),' ...
   'thresh_2d_vec(28),' ...
   'thresh_2d_vec(29),' ...
   'thresh_2d_vec(30),' ...
   'thresh_2d_vec(31),' ...
   'thresh_2d_vec(32),' ...
   'thresh_2d_vec(33),' ...
   'thresh_2d_vec(34),' ...
   'thresh_2d_vec(35),' ...
   'thresh_2d_vec(36),' ...
   'thresh_2d_vec(37),' ...
   'thresh_2d_vec(38),' ...
   'thresh_2d_vec(39),' ...
   'thresh_2d_vec(40),' ...
   'thresh_2d_vec(41),' ...
   'thresh_2d_vec(42),' ...
   'thresh_2d_vec(43),' ...
   'thresh_2d_vec(44),' ...
   'thresh_2d_vec(45),' ...
   'thresh_2d_vec(46),' ...
   'area_2d_vec(01),' ...
   'area_2d_vec(02),' ...
   'area_2d_vec(03),' ...
   'area_2d_vec(04),' ...
   'area_2d_vec(05),' ...
   'area_2d_vec(06),' ...
   'area_2d_vec(07),' ...
   'area_2d_vec(08),' ...
   'area_2d_vec(09),' ...
   'area_2d_vec(10),' ...
   'area_2d_vec(11),' ...
   'area_2d_vec(12),' ...
   'area_2d_vec(13),' ...
   'area_2d_vec(14),' ...
   'area_2d_vec(15),' ...
   'area_2d_vec(16),' ...
   'area_2d_vec(17),' ...
   'area_2d_vec(18),' ...
   'area_2d_vec(19),' ...
   'area_2d_vec(20),' ...
   'area_2d_vec(21),' ...
   'area_2d_vec(22),' ...
   'area_2d_vec(23),' ...
   'area_2d_vec(24),' ...
   'area_2d_vec(25),' ...
   'area_2d_vec(26),' ...
   'area_2d_vec(27),' ...
   'area_2d_vec(28),' ...
   'area_2d_vec(29),' ...
   'area_2d_vec(30),' ...
   'area_2d_vec(31),' ...
   'area_2d_vec(32),' ...
   'area_2d_vec(33),' ...
   'area_2d_vec(34),' ...
   'area_2d_vec(35),' ...
   'area_2d_vec(36),' ...
   'area_2d_vec(37),' ...
   'area_2d_vec(38),' ...
   'area_2d_vec(39),' ...
   'area_2d_vec(40),' ...
   'area_2d_vec(41),' ...
   'area_2d_vec(42),' ...
   'area_2d_vec(43),' ...
   'area_2d_vec(44),' ...
   'area_2d_vec(45),' ...
   'area_2d_vec(46),' ...
   'gradient_margin_2d'] ;
disp(disp_string)

disp_string = [ ...
   filename_gray, ',' ...
   filename_bin, ',' ...
   kernel, ',' ...
   num2str(dy) ',' ...
   num2str(dx) ',' ...
   num2str(dz) ',' ...
   num2str(height) ',' ...
   num2str(width) ',' ...
   num2str(depth) ',' ...
   num2str(segmentation_num, '%02d') ',' ...
   num2str(gray_threshold) ',' ...
   num2str(LNA_VERSION) ',' ...
   num2str(number_voxels_inside_3d) ',' ...
   num2str(volume_3d) ',' ...
   num2str(x_span_3d) ',' ...
   num2str(y_span_3d) ',' ...
   num2str(z_span_3d) ',' ...
   num2str(surface_area_3d) ',' ...
   num2str(sphericity_3d) ',' ...
   num2str(compactness_3d) ',' ...
   num2str(r_1_3d) ',' ...
   num2str(r_2_3d) ',' ...
   num2str(r_3_3d) ',' ...
   num2str(ratio_max_min_3d) ',' ...
   num2str(mean_gray_3d) ',' ...
   num2str(std_gray_3d) ',' ...
   num2str(var_gray_3d) ',' ...
   num2str(skewness_gray_3d) ',' ...
   num2str(kurtosis_gray_3d) ',' ...
   num2str(entropy_gray_3d) ',' ...
   num2str(num_gt_100_3d) ',' ...
   num2str(num_gt_150_3d) ',' ...
   num2str(num_gt_200_3d) ',' ...
   num2str(num_n100_to_n40_3d) ',' ...
   num2str(num_lt_n100_3d) ',' ...
   num2str(pct_gt_100_3d) ',' ...
   num2str(pct_gt_150_3d) ',' ...
   num2str(pct_gt_200_3d) ',' ...
   num2str(pct_n100_to_n40_3d) ',' ...
   num2str(pct_lt_n100_3d) ','...
   num2str(mean_gray_diff_3d) ',' ...
   num2str(std_gray_diff_3d) ',' ...
   num2str(var_gray_diff_3d) ',' ...
   num2str(skewness_gray_diff_3d) ',' ...
   num2str(kurtosis_gray_diff_3d) ',' ...
   num2str(entropy_gray_diff_3d) ',' ...
   num2str(correlation_metric_3d) ',' ...
   num2str(lacunarity_metric_3d) ',' ...
   num2str(summed_distance_3d) ',' ...
   num2str(mean_distance_3d) ',' ...
   num2str(norm_summed_distance_3d) ',' ...
   num2str(norm_mean_distance_3d) ',' ...
   num2str(fract_dim_vol_3d) ',' ...
   num2str(fract_dim_surf_3d) ',' ...
   num2str(thresh_3d_vec(01)) ',' ...
   num2str(thresh_3d_vec(02)) ',' ...
   num2str(thresh_3d_vec(03)) ',' ...
   num2str(thresh_3d_vec(04)) ',' ...
   num2str(thresh_3d_vec(05)) ',' ...
   num2str(thresh_3d_vec(06)) ',' ...
   num2str(thresh_3d_vec(07)) ',' ...
   num2str(thresh_3d_vec(08)) ',' ...
   num2str(thresh_3d_vec(09)) ',' ...
   num2str(thresh_3d_vec(10)) ',' ...
   num2str(thresh_3d_vec(11)) ',' ...
   num2str(thresh_3d_vec(12)) ',' ...
   num2str(thresh_3d_vec(13)) ',' ...
   num2str(thresh_3d_vec(14)) ',' ...
   num2str(thresh_3d_vec(15)) ',' ...
   num2str(thresh_3d_vec(16)) ',' ...
   num2str(thresh_3d_vec(17)) ',' ...
   num2str(thresh_3d_vec(18)) ',' ...
   num2str(thresh_3d_vec(19)) ',' ...
   num2str(thresh_3d_vec(20)) ',' ...
   num2str(thresh_3d_vec(21)) ',' ...
   num2str(thresh_3d_vec(22)) ',' ...
   num2str(thresh_3d_vec(23)) ',' ...
   num2str(thresh_3d_vec(24)) ',' ...
   num2str(thresh_3d_vec(25)) ',' ...
   num2str(thresh_3d_vec(26)) ',' ...
   num2str(thresh_3d_vec(27)) ',' ...
   num2str(thresh_3d_vec(28)) ',' ...
   num2str(thresh_3d_vec(29)) ',' ...
   num2str(thresh_3d_vec(30)) ',' ...
   num2str(thresh_3d_vec(31)) ',' ...
   num2str(thresh_3d_vec(32)) ',' ...
   num2str(thresh_3d_vec(33)) ',' ...
   num2str(thresh_3d_vec(34)) ',' ...
   num2str(thresh_3d_vec(35)) ',' ...
   num2str(thresh_3d_vec(36)) ',' ...
   num2str(thresh_3d_vec(37)) ',' ...
   num2str(thresh_3d_vec(38)) ',' ...
   num2str(thresh_3d_vec(39)) ',' ...
   num2str(thresh_3d_vec(40)) ',' ...
   num2str(thresh_3d_vec(41)) ',' ...
   num2str(thresh_3d_vec(42)) ',' ...
   num2str(thresh_3d_vec(43)) ',' ...
   num2str(thresh_3d_vec(44)) ',' ...
   num2str(thresh_3d_vec(45)) ',' ...
   num2str(thresh_3d_vec(46)) ',' ...
   num2str(volume_3d_vec(01)) ',' ...
   num2str(volume_3d_vec(02)) ',' ...
   num2str(volume_3d_vec(03)) ',' ...
   num2str(volume_3d_vec(04)) ',' ...
   num2str(volume_3d_vec(05)) ',' ...
   num2str(volume_3d_vec(06)) ',' ...
   num2str(volume_3d_vec(07)) ',' ...
   num2str(volume_3d_vec(08)) ',' ...
   num2str(volume_3d_vec(09)) ',' ...
   num2str(volume_3d_vec(10)) ',' ...
   num2str(volume_3d_vec(11)) ',' ...
   num2str(volume_3d_vec(12)) ',' ...
   num2str(volume_3d_vec(13)) ',' ...
   num2str(volume_3d_vec(14)) ',' ...
   num2str(volume_3d_vec(15)) ',' ...
   num2str(volume_3d_vec(16)) ',' ...
   num2str(volume_3d_vec(17)) ',' ...
   num2str(volume_3d_vec(18)) ',' ...
   num2str(volume_3d_vec(19)) ',' ...
   num2str(volume_3d_vec(20)) ',' ...
   num2str(volume_3d_vec(21)) ',' ...
   num2str(volume_3d_vec(22)) ',' ...
   num2str(volume_3d_vec(23)) ',' ...
   num2str(volume_3d_vec(24)) ',' ...
   num2str(volume_3d_vec(25)) ',' ...
   num2str(volume_3d_vec(26)) ',' ...
   num2str(volume_3d_vec(27)) ',' ...
   num2str(volume_3d_vec(28)) ',' ...
   num2str(volume_3d_vec(29)) ',' ...
   num2str(volume_3d_vec(30)) ',' ...
   num2str(volume_3d_vec(31)) ',' ...
   num2str(volume_3d_vec(32)) ',' ...
   num2str(volume_3d_vec(33)) ',' ...
   num2str(volume_3d_vec(34)) ',' ...
   num2str(volume_3d_vec(35)) ',' ...
   num2str(volume_3d_vec(36)) ',' ...
   num2str(volume_3d_vec(37)) ',' ...
   num2str(volume_3d_vec(38)) ',' ...
   num2str(volume_3d_vec(39)) ',' ...
   num2str(volume_3d_vec(40)) ',' ...
   num2str(volume_3d_vec(41)) ',' ...
   num2str(volume_3d_vec(42)) ',' ...
   num2str(volume_3d_vec(43)) ',' ...
   num2str(volume_3d_vec(44)) ',' ...
   num2str(volume_3d_vec(45)) ',' ...
   num2str(volume_3d_vec(46)) ',' ...
   num2str(gradient_margin_3d) ',' ...
   num2str(plane_index_of_maximal_area) ',' ...
   num2str(number_pixels_inside_2d) ',' ...
   num2str(area_2d) ',' ...
   num2str(x_span_2d) ',' ...
   num2str(y_span_2d) ',' ...
   num2str(perimeter_2d) ',' ...
   num2str(circularity_2d) ',' ...
   num2str(r_1_2d) ',' ...
   num2str(r_2_2d) ',' ...
   num2str(ratio_max_min_2d) ',' ...
   num2str(mean_gray_2d) ',' ...
   num2str(std_gray_2d) ',' ...
   num2str(var_gray_2d) ',' ...
   num2str(skewness_gray_2d) ',' ...
   num2str(kurtosis_gray_2d) ',' ...
   num2str(entropy_gray_2d) ',' ...
   num2str(num_gt_100_2d) ',' ...
   num2str(num_gt_150_2d) ',' ...
   num2str(num_gt_200_2d) ',' ...
   num2str(num_n100_to_n40_2d) ',' ...
   num2str(num_lt_n100_2d) ',' ...
   num2str(pct_gt_100_2d) ',' ...
   num2str(pct_gt_150_2d) ',' ...
   num2str(pct_gt_200_2d) ',' ...
   num2str(pct_n100_to_n40_2d) ',' ...
   num2str(pct_lt_n100_2d) ',' ...
   num2str(mean_gray_diff_2d) ',' ...
   num2str(std_gray_diff_2d) ',' ...
   num2str(var_gray_diff_2d) ',' ...
   num2str(skewness_gray_diff_2d) ',' ...
   num2str(kurtosis_gray_diff_2d) ',' ...
   num2str(entropy_gray_diff_2d) ',' ...
   num2str(correlation_metric_2d) ',' ...
   num2str(lacunarity_metric_2d) ',' ...
   num2str(summed_distance_2d) ',' ...
   num2str(mean_distance_2d) ',' ...
   num2str(norm_summed_distance_2d) ',' ...
   num2str(norm_mean_distance_2d) ',' ...
   num2str(fract_dim_area_2d) ',' ...
   num2str(fract_dim_perim_2d) ',' ...
   num2str(thresh_2d_vec(01)) ',' ...
   num2str(thresh_2d_vec(02)) ',' ...
   num2str(thresh_2d_vec(03)) ',' ...
   num2str(thresh_2d_vec(04)) ',' ...
   num2str(thresh_2d_vec(05)) ',' ...
   num2str(thresh_2d_vec(06)) ',' ...
   num2str(thresh_2d_vec(07)) ',' ...
   num2str(thresh_2d_vec(08)) ',' ...
   num2str(thresh_2d_vec(09)) ',' ...
   num2str(thresh_2d_vec(10)) ',' ...
   num2str(thresh_2d_vec(11)) ',' ...
   num2str(thresh_2d_vec(12)) ',' ...
   num2str(thresh_2d_vec(13)) ',' ...
   num2str(thresh_2d_vec(14)) ',' ...
   num2str(thresh_2d_vec(15)) ',' ...
   num2str(thresh_2d_vec(16)) ',' ...
   num2str(thresh_2d_vec(17)) ',' ...
   num2str(thresh_2d_vec(18)) ',' ...
   num2str(thresh_2d_vec(19)) ',' ...
   num2str(thresh_2d_vec(20)) ',' ...
   num2str(thresh_2d_vec(21)) ',' ...
   num2str(thresh_2d_vec(22)) ',' ...
   num2str(thresh_2d_vec(23)) ',' ...
   num2str(thresh_2d_vec(24)) ',' ...
   num2str(thresh_2d_vec(25)) ',' ...
   num2str(thresh_2d_vec(26)) ',' ...
   num2str(thresh_2d_vec(27)) ',' ...
   num2str(thresh_2d_vec(28)) ',' ...
   num2str(thresh_2d_vec(29)) ',' ...
   num2str(thresh_2d_vec(30)) ',' ...
   num2str(thresh_2d_vec(31)) ',' ...
   num2str(thresh_2d_vec(32)) ',' ...
   num2str(thresh_2d_vec(33)) ',' ...
   num2str(thresh_2d_vec(34)) ',' ...
   num2str(thresh_2d_vec(35)) ',' ...
   num2str(thresh_2d_vec(36)) ',' ...
   num2str(thresh_2d_vec(37)) ',' ...
   num2str(thresh_2d_vec(38)) ',' ...
   num2str(thresh_2d_vec(39)) ',' ...
   num2str(thresh_2d_vec(40)) ',' ...
   num2str(thresh_2d_vec(41)) ',' ...
   num2str(thresh_2d_vec(42)) ',' ...
   num2str(thresh_2d_vec(43)) ',' ...
   num2str(thresh_2d_vec(44)) ',' ...
   num2str(thresh_2d_vec(45)) ',' ...
   num2str(thresh_2d_vec(46)) ',' ...
   num2str(area_2d_vec(01)) ',' ...
   num2str(area_2d_vec(02)) ',' ...
   num2str(area_2d_vec(03)) ',' ...
   num2str(area_2d_vec(04)) ',' ...
   num2str(area_2d_vec(05)) ',' ...
   num2str(area_2d_vec(06)) ',' ...
   num2str(area_2d_vec(07)) ',' ...
   num2str(area_2d_vec(08)) ',' ...
   num2str(area_2d_vec(09)) ',' ...
   num2str(area_2d_vec(10)) ',' ...
   num2str(area_2d_vec(11)) ',' ...
   num2str(area_2d_vec(12)) ',' ...
   num2str(area_2d_vec(13)) ',' ...
   num2str(area_2d_vec(14)) ',' ...
   num2str(area_2d_vec(15)) ',' ...
   num2str(area_2d_vec(16)) ',' ...
   num2str(area_2d_vec(17)) ',' ...
   num2str(area_2d_vec(18)) ',' ...
   num2str(area_2d_vec(19)) ',' ...
   num2str(area_2d_vec(20)) ',' ...
   num2str(area_2d_vec(21)) ',' ...
   num2str(area_2d_vec(22)) ',' ...
   num2str(area_2d_vec(23)) ',' ...
   num2str(area_2d_vec(24)) ',' ...
   num2str(area_2d_vec(25)) ',' ...
   num2str(area_2d_vec(26)) ',' ...
   num2str(area_2d_vec(27)) ',' ...
   num2str(area_2d_vec(28)) ',' ...
   num2str(area_2d_vec(29)) ',' ...
   num2str(area_2d_vec(30)) ',' ...
   num2str(area_2d_vec(31)) ',' ...
   num2str(area_2d_vec(32)) ',' ...
   num2str(area_2d_vec(33)) ',' ...
   num2str(area_2d_vec(34)) ',' ...
   num2str(area_2d_vec(35)) ',' ...
   num2str(area_2d_vec(36)) ',' ...
   num2str(area_2d_vec(37)) ',' ...
   num2str(area_2d_vec(38)) ',' ...
   num2str(area_2d_vec(39)) ',' ...
   num2str(area_2d_vec(40)) ',' ...
   num2str(area_2d_vec(41)) ',' ...
   num2str(area_2d_vec(42)) ',' ...
   num2str(area_2d_vec(43)) ',' ...
   num2str(area_2d_vec(44)) ',' ...
   num2str(area_2d_vec(45)) ',' ...
   num2str(area_2d_vec(46)) ',' ...
   num2str(gradient_margin_2d)] ;
disp(disp_string)

diary off ;

disp('Exiting lna01_0') ;
toc ;

end